#!/bin/bash
#set -x
debug=/bin/true

for program in ansible-config ansible-inventory jq; do
    which "$program" > /dev/null || { echo "ERROR: not found: $program"; exit 1; }
done

if [ $# -eq 0 ]; then
    echo "Usage: $(basename $0) hostname <ssh arguments>"
    echo "Avaliable hosts:"
    # jq magic: https://stedolan.github.io/jq/manual/
    # .[] array/object value iterator
    # | combines two filters feeding output of left one into input of right one
    # .hosts? produces content of hosts key, no error if it does not exist
    # .[]? array/object value iterator, no error if output of . is not array or object (for example, it is null)
    ansible-inventory --list | jq '.[] | .hosts? | .[]? ' | sort | uniq
    exit 1
fi

__ansible_config_dump="$(ansible-config dump)"
ssh_args=$(echo "$__ansible_config_dump" | grep '^ANSIBLE_SSH_ARGS' | cut -d'=' -f2-)
ssh_executable=scp
$debug && echo "ssh_args: $ssh_args"
$debug && echo "ssh_executable: $ssh_executable"

case "$1" in
  -*)
    ssh_commandline_args="$ssh_commandline_args $1"
    shift
    ;;
esac

$debug && echo "ssh_commandline_args: $ssh_commandline_args"

if [[ "$1" == *":"* ]]; then
  host="$(echo $1 | cut -d : -f 1)"
  remotepath="$(echo $1 | cut -d : -f 2-)"
  copy_from="remote"
  shift
  localpath="$1"
else
  localpath="$1"
  shift
  host="$(echo $1 | cut -d : -f 1)"
  remotepath="$(echo $1 | cut -d : -f 2-)"
  copy_from="local"
fi

$debug && echo "copying from $copy_from"

# All other arguments are ssh arguments
shift

inventory=$(ansible-inventory --host "$host")
if [ $? -ne 0 ]; then
    echo "ERROR: ansible inventory failed to gather info on $host"
    exit 1
fi

# As of ansible 2.0, new style options like ansible_host override old style ansible_ssh_*
# Except ansible_ssh_common_args and ansible_ssh_extra_args
ansible_ssh_host=$(echo "$inventory" | jq ".ansible_ssh_host?" | grep -v '^null$' | tr -d \")
ansible_host=$(echo "$inventory" | jq ".ansible_host?" | grep -v '^null$' | tr -d \")
# Assign new value if variable is not set or empty
ansible_host="${ansible_host:-$ansible_ssh_host}"
$debug && echo "ansible_host: $ansible_host"
if [[ -z "$ansible_host" ]]; then
  ansible_host="$host"
  $debug && echo "ansible_host it empty, using provided host $host"
fi

ansible_ssh_user=$(echo "$inventory" | jq ".ansible_ssh_user?" | grep -v '^null$' | tr -d \")
ansible_user=$(echo "$inventory" | jq ".ansible_user? " | grep -v '^null$' | tr -d \")
ansible_user="${ansible_user:-$ansible_ssh_user}"
$debug && echo "ansible_user: $ansible_user"

ansible_ssh_port=$(echo "$inventory" | jq ".ansible_ssh_port?" | grep -v '^null$' | tr -d \")
ansible_port=$(echo "$inventory" | jq ".ansible_port?" | grep -v '^null$' | tr -d \")
ansible_port="${ansible_port:-$ansible_ssh_port}"
$debug && echo "ansible_port: $ansible_port"

ansible_ssh_common_args=$(echo "$inventory" | jq ".ansible_ssh_common_args" | grep -v '^null$' | tr -d \")
$debug && echo "ansible_ssh_common_args: $ansible_ssh_common_args"

ansible_ssh_extra_args=$(echo "$inventory" | jq ".ansible_ssh_extra_args" | grep -v '^null$' | tr -d \")
$debug && echo "ansible_ssh_extra_args: $ansible_ssh_extra_args"

# We need to prepend hostname with username@
if [ -n "$ansible_user" ]; then ansible_user="${ansible_user}@"; fi

# If port is set, add it to ssh arguments
if [ -n "$ansible_port" ]; then ssh_args="$ssh_args -p $ansible_port"; fi

if [[ "$copy_from" == "local" ]]; then
  $debug && echo "result command: ${ssh_executable} ${ssh_args} ${ansible_ssh_common_args} ${ansible_ssh_extra_args} ${ssh_commandline_args} ${localpath} ${ansible_user}${ansible_host}:${remotepath}"
  exec ${ssh_executable} ${ssh_args} ${ansible_ssh_common_args} ${ansible_ssh_extra_args} ${ssh_commandline_args} "${localpath}" ${ansible_user}${ansible_host}:"${remotepath}"
fi

if [[ "$copy_from" == "remote" ]]; then
  $debug && echo "result command: ${ssh_executable} ${ssh_args} ${ansible_ssh_common_args} ${ansible_ssh_extra_args} ${ssh_commandline_args} ${ansible_user}${ansible_host}:${remotepath} ${localpath}"
  exec ${ssh_executable} ${ssh_args} ${ansible_ssh_common_args} ${ansible_ssh_extra_args} ${ssh_commandline_args} ${ansible_user}${ansible_host}:"${remotepath}" "${localpath}"
fi
